# the macro's here are used to instead of the default cartographer console commands. 
# this is due to the camera using too much usb bus bandwidth. when calibrating with the camera enabled on the stock board theres a very high chance of the mcu crashing or timing out.
# credits to ShimaYT, Destinal, BootyEngineer and Zarboz <3


[gcode_shell_command cam-stop]                                                   # define camera stop script refferenced below
command: killall mjpg_streamer && killall cam_app && killall cx_ai_middleware    # kills all creality camera related services
timeout:4                                                                        # waits 4 seconds to ensure the command worked before timing it out
verbose: false                                                                   # shows results of command in klipper console - set to false once working 


[gcode_shell_command cam-start]                                                  # define camera start script refferenced below, edit at your own risk as it can cause mcu crash while printing
command: /opt/bin/mjpg_streamer -b -i "/opt/lib/mjpg-streamer/input_uvc.so -d /dev/video4 -r 1280x720 -f 15" -o "/opt/lib/mjpg-streamer/output_http.so -p 8080"
timeout: 4                                                                       # waits 4 seconds to ensure the command worked before timing it out
verbose: false                                                                   # shows results of command in klipper console - set to false once working 


[gcode_macro CARTO_ESTIMATE_BACKLASH]
description: calibrate cartographer backlash without crashing
gcode:
     g28                                                                        # home axis required
     RUN_SHELL_COMMAND CMD=cam-stop                                             # stop camera services
     {action_respond_info("Camera Stopped For Probing")}                        # notify user of camera state
     {% set POSITION_X = printer.configfile.settings['stepper_x'].position_max/2 %}
     {% set POSITION_Y = printer.configfile.settings['stepper_y'].position_max/2 %}
     G1 X{POSITION_X} Y{POSITION_Y} F6000                                       # moves print head to center of bed
     CARTOGRAPHER_ESTIMATE_BACKLASH                                             # do z backlash command
     RUN_SHELL_COMMAND CMD=cam-start                                            # restart camera services
     {action_respond_info("Camera re-started!")}                                # notify user of camera state


[gcode_macro CARTO_PROBE_ACCURACY]
description: test zprobe accuracy without crashing.
gcode:
     g28                                                                         # home axis required
     RUN_SHELL_COMMAND CMD=cam-stop                                              # stop camera services
     {action_respond_info("Camera Stopped For Probing")}                         # notify user of camera state
     {% set POSITION_X = printer.configfile.settings['stepper_x'].position_max/2 %}
     {% set POSITION_Y = printer.configfile.settings['stepper_y'].position_max/2 %}
     G1 X{POSITION_X} Y{POSITION_Y} F6000                                       # moves print head to center of bed
     PROBE_ACCURACY                                                             # test probe accuracy
     RUN_SHELL_COMMAND CMD=cam-start                                            # restart camera services
     {action_respond_info("Camera re-started!")}                                # notify user of camera state


[gcode_macro CARTO_CALIBRATE]
description: calibrate initial Z offset without crashing mcu.
gcode:
     G28 X Y                                                                    # home the X Y 
     RUN_SHELL_COMMAND CMD=cam-stop                                             # stop camera services
     {action_respond_info("Camera Stopped For Probing")}                        # notify user of camera state
     G90                                                                        # sets position to absolute
     {% set POSITION_X = printer.configfile.settings['stepper_x'].position_max/2 %}
     {% set POSITION_Y = printer.configfile.settings['stepper_y'].position_max/2 %}
     G1 X{POSITION_X} Y{POSITION_Y} F6000                                       # moves print head to center of bed
     {action_respond_info("Waiting for bed temperature to hit 60c")}            # notify user to wait before continuing
     M190 S60                                                                   # wait for bed temperature before next step
     {action_respond_info("Ready to calibrate!")}                               # notify user ready to calibrate!
     {action_respond_info("You will need to restart the camera on competion")}  # remind user to manually re-start the camera
     CARTOGRAPHER_CALIBRATE                                                     # calibrate Initial Z command. 


[gcode_macro cam_restart]                                                       # booty was right dont use dashes -_-
description: restarts camera and changes resolution to what is defined in printer.cfg
gcode:
     RUN_SHELL_COMMAND CMD=cam-stop                                             # stops the camera 
     RUN_SHELL_COMMAND CMD=cam-start                                            # starts the camera


[gcode_macro cam_stop]                  
description: stops the camera from running
gcode:
     RUN_SHELL_COMMAND CMD=cam-stop                                             # stops the camera


[gcode_macro cam_start]                   
description: starts camera and changes resolution to what is defined in printer.cfg
gcode:
     RUN_SHELL_COMMAND CMD=cam-start                                            # starts the camera back up


[gcode_macro carto_bed_mesh]
description: stops the camera to mesh the bed then restarts
gcode:
    RUN_SHELL_COMMAND CMD=cam-stop                                              # stop camera services to prevent mcu overload
    {action_respond_info("Camera Stopped For Probing")}                         # notify user of camera state
    G4 P1000                                                                    # wait required to allow the camera services to close
    BED_MESH_CLEAR                                                              # clear current mesh
    G4 P500                                                                     # wait required to prevent MCU overload / inconsistant meshing
    SET_VELOCITY_LIMIT ACCEL=15000 ACCEL_TO_DECEL=10000                         # drop accels to prevent hyper agressive meshing
    BED_MESH_CALIBRATE                                                          # start bedmesh calibrate
    G4 P500                                                                     # wait required to prevent MCU overload / inconsistant mesh calculation
    SET_VELOCITY_LIMIT ACCEL=20000 ACCEL_TO_DECEL=10000                         # raise accels back to stock machine standard speeds.
    {action_respond_info("Camera re-started!")}                                 # notify user of camera state
    RUN_SHELL_COMMAND CMD=cam-start                                             # re-start creality camera service
